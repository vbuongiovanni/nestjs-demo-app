import { Test, TestingModule } from '@nestjs/testing';
import { plainToInstance } from 'class-transformer';
import { <%= classify(name) %>Controller } from '../<%= dasherize(name) %>.controller';
import { <%= classify(name) %>Service } from '../<%= dasherize(name) %>.service';
import { <%= classify(singularName) %>ResponseDto } from '../<%= dasherize(name) %>.dto';
import {
  create<%= classify(singularName) %>Stub,
  get<%= classify(singularName) %>Stub,
  get<%= classify(name) %>Stub,
  update<%= classify(singularName) %>Stub,
  delete<%= classify(singularName) %>Stub,
  create<%= classify(singularName) %>RequestBody,
  update<%= classify(singularName) %>RequestBody,
  test<%= classify(singularName) %>1Id,
} from './<%= dasherize(name) %>.stub';

// this file was generated by nestjs/schematics - controller-spec

jest.mock('../<%= dasherize(name) %>.service');

describe('<%= classify(singularName) %>Controller', () => {
  let controller: <%= classify(name) %>Controller;
  let mockService: <%= classify(name) %>Service;

  beforeAll(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [<%= classify(name) %>Controller],
      providers: [<%= classify(name) %>Service],
    }).compile();

    controller = module.get<<%= classify(name) %>Controller>(<%= classify(name) %>Controller);
    mockService = module.get<<%= classify(name) %>Service>(<%= classify(name) %>Service);

    jest.clearAllMocks();
  });

  describe('create<%= classify(singularName) %>', () => {
    describe('Given an authenticated user', () => {
      describe('When the user attempts to create a <%= classify(singularName) %>', () => {
        let response: <%= classify(singularName) %>ResponseDto;
        beforeEach(async () => {
          response = await controller.create<%= classify(singularName) %>(create<%= classify(singularName) %>RequestBody);
        });

        it('then it should call the create<%= classify(singularName) %> method of the <%= classify(name) %>Service', async () => {
          expect(mockService.create<%= classify(singularName) %>).toHaveBeenCalledWith(create<%= classify(singularName) %>RequestBody);
        });

        it('and it should return a <%= name %> in the shape of a DTO transformed object.', () => {
          const expectedResponse = plainToInstance(<%= classify(singularName) %>ResponseDto, create<%= classify(singularName) %>Stub(), { excludeExtraneousValues: true });
          expect(response).toEqual(expectedResponse);
        });
      });
    });
  });

  describe('get<%= classify(name) %>', () => {
    describe('Given an authenticated user', () => {
      describe('When the user attempts to fetch all <%= classify(name) %>', () => {
        let response: <%= classify(singularName) %>ResponseDto[];
        beforeEach(async () => {
          response = await controller.get<%= classify(name) %>();
        });

        it('then it should call the get<%= classify(singularName) %> method of the <%= classify(name) %>Service', async () => {
          expect(mockService.get<%= classify(name) %>).toHaveBeenCalledWith();
        });

        it('and it should return all <%= name %> in the shape of a DTO transformed object.', () => {
          const expectedResponse = plainToInstance(<%= classify(singularName) %>ResponseDto, get<%= classify(name) %>Stub(), { excludeExtraneousValues: true });
          expect(response).toEqual(expectedResponse);
        });
      });
    });
  });

  describe('get<%= classify(singularName) %>', () => {
    describe('Given an authenticated user', () => {
      describe('When the user attempts to fetch a single <%= classify(singularName) %>', () => {
        let response: <%= classify(singularName) %>ResponseDto;
        beforeEach(async () => {
          response = await controller.get<%= classify(singularName) %>(test<%= classify(singularName) %>1Id);
        });

        it('then it should call the get<%= classify(singularName) %> method of the <%= classify(name) %>Service', async () => {
          expect(mockService.get<%= classify(singularName) %>).toHaveBeenCalledWith(test<%= classify(singularName) %>1Id);
        });

        it('and it should return a <%= name %> in the shape of a DTO transformed object.', () => {
          const expectedResponse = plainToInstance(<%= classify(singularName) %>ResponseDto, get<%= classify(singularName) %>Stub(), { excludeExtraneousValues: true });
          expect(response).toEqual(expectedResponse);
        });
      });
    });
  });

  describe('update<%= classify(singularName) %>', () => {
    describe('Given an authenticated user', () => {
      describe('When the user attempts to update a <%= classify(singularName) %>', () => {
        let response: <%= classify(singularName) %>ResponseDto;
        beforeEach(async () => {
          response = await controller.update<%= classify(singularName) %>(test<%= classify(singularName) %>1Id, update<%= classify(singularName) %>RequestBody);
        });

        it('then it should call the update<%= classify(singularName) %> method of the <%= classify(name) %>Service', async () => {
          expect(mockService.update<%= classify(singularName) %>).toHaveBeenCalledWith(test<%= classify(singularName) %>1Id, update<%= classify(singularName) %>RequestBody);
        });

        it('and it should return a <%= name %> in the shape of a DTO transformed object.', () => {
          const expectedResponse = plainToInstance(<%= classify(singularName) %>ResponseDto, update<%= classify(singularName) %>Stub(), { excludeExtraneousValues: true });
          expect(response).toEqual(expectedResponse);
        });
      });
    });
  });

  describe('delete<%= classify(singularName) %>', () => {
    describe('Given an authenticated user', () => {
      describe('When the user attempts to fetch a single <%= classify(singularName) %>', () => {
        let response: <%= classify(singularName) %>ResponseDto;
        beforeEach(async () => {
          response = await controller.delete<%= classify(singularName) %>(test<%= classify(singularName) %>1Id);
        });

        it('then it should call the delete<%= classify(singularName) %> method of the <%= classify(name) %>Service', async () => {
          expect(mockService.delete<%= classify(singularName) %>).toHaveBeenCalledWith(test<%= classify(singularName) %>1Id);
        });

        it('and it should return a <%= name %> in the shape of a DTO transformed object.', () => {
          const expectedResponse = plainToInstance(<%= classify(singularName) %>ResponseDto, delete<%= classify(singularName) %>Stub(), { excludeExtraneousValues: true });
          expect(response).toEqual(expectedResponse);
        });
      });
    });
  });
});
