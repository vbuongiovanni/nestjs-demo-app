import { Test, TestingModule } from '@nestjs/testing';
import { plainToInstance } from 'class-transformer';
import { CatsController } from '../cats.controller';
import { CatsService } from '../cats.service';
import { CatResponseDto } from '../cats.dto';
import {
  createCatStub,
  getCatStub,
  getCatsStub,
  updateCatStub,
  deleteCatStub,
  createCatRequestBody,
  updateCatRequestBody,
  testCat1Id,
} from './cats.stub';

// this file was generated by nestjs/schematics - controller-spec

jest.mock('../cats.service');

describe('CatController', () => {
  let controller: CatsController;
  let mockService: CatsService;

  beforeAll(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [CatsController],
      providers: [CatsService],
    }).compile();

    controller = module.get<CatsController>(CatsController);
    mockService = module.get<CatsService>(CatsService);

    jest.clearAllMocks();
  });

  describe('createCat', () => {
    describe('Given an authenticated user', () => {
      describe('When the user attempts to create a Cat', () => {
        let response: CatResponseDto;
        beforeEach(async () => {
          response = await controller.createCat(createCatRequestBody);
        });

        it('then it should call the createCat method of the CatsService', async () => {
          expect(mockService.createCat).toHaveBeenCalledWith(createCatRequestBody);
        });

        it('and it should return a cats in the shape of a DTO transformed object.', () => {
          const expectedResponse = plainToInstance(CatResponseDto, createCatStub(), { excludeExtraneousValues: true });
          expect(response).toEqual(expectedResponse);
        });
      });
    });
  });

  describe('getCats', () => {
    describe('Given an authenticated user', () => {
      describe('When the user attempts to fetch all Cats', () => {
        let response: CatResponseDto[];
        beforeEach(async () => {
          response = await controller.getCats();
        });

        it('then it should call the getCat method of the CatsService', async () => {
          expect(mockService.getCats).toHaveBeenCalledWith();
        });

        it('and it should return all cats in the shape of a DTO transformed object.', () => {
          const expectedResponse = plainToInstance(CatResponseDto, getCatsStub(), { excludeExtraneousValues: true });
          expect(response).toEqual(expectedResponse);
        });
      });
    });
  });

  describe('getCat', () => {
    describe('Given an authenticated user', () => {
      describe('When the user attempts to fetch a single Cat', () => {
        let response: CatResponseDto;
        beforeEach(async () => {
          response = await controller.getCat(testCat1Id);
        });

        it('then it should call the getCat method of the CatsService', async () => {
          expect(mockService.getCat).toHaveBeenCalledWith(testCat1Id);
        });

        it('and it should return a cats in the shape of a DTO transformed object.', () => {
          const expectedResponse = plainToInstance(CatResponseDto, getCatStub(), { excludeExtraneousValues: true });
          expect(response).toEqual(expectedResponse);
        });
      });
    });
  });

  describe('updateCat', () => {
    describe('Given an authenticated user', () => {
      describe('When the user attempts to update a Cat', () => {
        let response: CatResponseDto;
        beforeEach(async () => {
          response = await controller.updateCat(testCat1Id, updateCatRequestBody);
        });

        it('then it should call the updateCat method of the CatsService', async () => {
          expect(mockService.updateCat).toHaveBeenCalledWith(testCat1Id, updateCatRequestBody);
        });

        it('and it should return a cats in the shape of a DTO transformed object.', () => {
          const expectedResponse = plainToInstance(CatResponseDto, updateCatStub(), { excludeExtraneousValues: true });
          expect(response).toEqual(expectedResponse);
        });
      });
    });
  });

  describe('deleteCat', () => {
    describe('Given an authenticated user', () => {
      describe('When the user attempts to fetch a single Cat', () => {
        let response: CatResponseDto;
        beforeEach(async () => {
          response = await controller.deleteCat(testCat1Id);
        });

        it('then it should call the deleteCat method of the CatsService', async () => {
          expect(mockService.deleteCat).toHaveBeenCalledWith(testCat1Id);
        });

        it('and it should return a cats in the shape of a DTO transformed object.', () => {
          const expectedResponse = plainToInstance(CatResponseDto, deleteCatStub(), { excludeExtraneousValues: true });
          expect(response).toEqual(expectedResponse);
        });
      });
    });
  });
});
